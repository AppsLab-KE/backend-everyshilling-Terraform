name: Deploy Swarm Cluster

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
   
      - name: installing aws cli
        run: |
          pip install --upgrade pip
          pip install awscli
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform-version: 4.62.0
        
      - name: List directory contents
        run: ls -la
        
      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Workspace
        id: workspace
        run: |
          cd terraform
          terraform workspace select dev || terraform workspace new dev

      - name: Terraform Refresh
        if: steps.workspace.outputs.changed == 'true'
        run: |
          cd terraform
          terraform refresh -var-file=tfvars/dev.tfvars

      - name: Terraform Apply
        if: steps.workspace.outputs.changed != 'true'
        run: |
          cd terraform
          terraform apply -auto-approve -var-file=tfvars/dev.tfvars
          terraform output -raw 
          
      - name: Get EC2 instance manager ip addresses
        id: master_public_ip
        run: echo "::set-output name=ips::$(terraform output -raw master_public_ip)"

#       - name: Get EC2 instance manager ip addresses
#         id: worker1_public_ip
#         run: echo "::set-output name=ips::$(terraform output -raw worker1_public_ip)"

#       - name: Get Swarm Manager IP
#         id: get-manager-ip
#         run: |
#           swarm_manager_ip=$(terraform output -raw swarm_manager_ip)
#           echo "::set-output name=manager-ip::$swarm_manager_ip"

      - name: Initialize Docker Swarm
        run: |
          ssh ubuntu@${{ steps.get-master-ip.outputs.manager-ip }} "docker swarm init --advertise-addr ${{ steps.get-master-ip.outputs.master-ip }}"
    
      - name: Get Swarm Worker IP
        id: get-worker-ip
        run: |
          swarm_worker_ip=$(terraform output -raw swarm_worker_ip)
          echo "::set-output name=worker-ip::$swarm_worker_ip"

      - name: Join Swarm Worker
        run: |
          ssh ubuntu@${{ steps.get-manager-ip.outputs.manager-ip }} "docker swarm join-token worker | grep token"
          ssh ubuntu@${{ steps.get-worker-ip.outputs.worker-ip }} "docker swarm join --token <worker_token> ${{ steps.get-manager-ip.outputs.manager-ip }}"
