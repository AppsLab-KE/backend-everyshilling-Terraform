# This workflow installs AWS CLI, Configures AWS Credentials and runs terraform steps that outputs master and worker public ip.
name: Deploy Swarm Cluster
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
   
      - name: installing aws cli
        run: |
          pip install --upgrade pip
          pip install awscli
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-east-1
          
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform-version: 1.0.0
        
      - name: List directory contents
        run: ls -la
        
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
          
#       - name: Terraform Workspace
#         id: workspace
#         run: |
#           cd terraform
#           terraform workspace select dev || terraform workspace new dev
          
      - name: Terraform Refresh
        if: steps.workspace.outputs.changed == 'true'
        run: |
          cd terraform
          terraform refresh -var-file=tfvars/dev.tfvars
          
      - name: Terraform Apply
        if: steps.workspace.outputs.changed != 'true'
        run: |
          cd terraform
          terraform apply -auto-approve -var-file=tfvars/dev.tfvars | tee output.txt
          
      - name: Extract master IP addresses
        run: |
          echo "Master IP address:"
          grep -oE 'master_public_ip = \b([0-9]{1,3}\.){3}[0-9]{1,3}\b' output.txt | awk '{print $NF}'
        env:
          OUTPUT_FILE: output.txt
    
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts
        env:
          HOST: ${{ steps.get_maste_ips.outputs.master_public_ip}}

     
      - name: Run Swarm setup script on master
        uses: appleboy/ssh-action@master
        with:
          host: ${{ steps.get_master_ip.outputs.master_public_ip }}
          username: ubuntu
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
           IFS=', ' read -r -a NODE_IPS <<< "$HOST"
            bash deploy_swarm.sh

#       - name: Run Swarm setup script on worker
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ steps.get_worker_ip.outputs.worker_ip_address }}
#           username: ubuntu
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           script: |
#             bash deploy_swarm.sh

          

#       - name: Get private IP from Terraform output
#         id: get-private-ip
#         run: echo "master_private_ip=$(terraform output -raw master_private_ip)" >> ${{ env.GITHUB_ENV }}
        
#       - name: SSH into EC2 instance and Initialize Docker swarm
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ steps.master_public_ip.outputs.master_public_ip }}:22
#           username: ubuntu
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           port: 22
#           script: |
#             echo "Connected to EC2 instance"
#             sudo su
#             cd ~
#             sudo apt-get update
#             sudo apt install docker.io
#             private_ip=$(terraform output master_private_ip)
#             sudo docker swarm init --advertise-addr "${{ steps.get-private-ip.outputs.master_private_ip }}:2377":22
#             sudo docker swarm join-token worker | grep token

#       - name: Get EC2 instance worker public IP address
#         id: worker1_public_ip
#         run: echo "worker1_public_ip=$(terraform output -raw worker1_public_ip)" >> ${{ env.GITHUB_ENV }}

#       - name: SSH into EC2 instance and Join Swarm
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ steps.worker1_public_ip.outputs.worker1_public_ip }}:22
#           username: ubuntu
#           key: ${{ secrets.SSH_PRIVATE_KEY }}
#           port: 22
#           script: |
#             echo "Connected to EC2 instance"
#             sudo su
#             cd ~
#             sudo apt-get update
#             sudo apt install docker.io
#             sudo docker swarm join --token <worker_token> $master_ip:2377



#       - name: Join Swarm Worker
#         run: |
#           ssh ubuntu@${{ steps.master_public_ip.outputs.master_public_ip }} "docker swarm join-token worker | grep token"
#           ssh ubuntu@${{ steps.get-worker1_public_ip.outputs.worker1_public_ip }} "docker swarm join --token <worker_token> ${{ steps.master_public_ip.outputs.master_public_ip }}"
